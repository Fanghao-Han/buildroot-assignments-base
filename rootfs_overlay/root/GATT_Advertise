#!/usr/bin/env python3

import sys
import dbus, dbus.mainloop.glib
import gobject as GObject

from example_advertisement import Advertisement
from example_advertisement import register_ad_cb, register_ad_error_cb
from example_gatt_server import Service, Characteristic
from example_gatt_server import register_app_cb, register_app_error_cb


BLUEZ_SERVICE_NAME =           'org.bluez'
DBUS_OM_IFACE =                'org.freedesktop.DBus.ObjectManager'
LE_ADVERTISING_MANAGER_IFACE = 'org.bluez.LEAdvertisingManager1'
GATT_MANAGER_IFACE =           'org.bluez.GattManager1'
GATT_CHRC_IFACE =              'org.bluez.GattCharacteristic1'
#set the UUID for the service that contains the notification characteristic
COMMAND_SERVICE_UUID =            '6e400001-b5a3-f393-e0a9-e50e24dcca9e'
#set the UUID for the characteristic that supports notify
COMMAND_NOTIFY_CHARACTERISTIC_UUID =  '6e400002-b5a3-f393-e0a9-e50e24dcca9e'

#set the localname for your advertisement object
LOCAL_NAME =                   'RaspberryPi3_BLE_Controller'
mainloop = None

# Override StartNotify() method derived from characteristic
	# Using a flag to indicate whether notification is enabled by client
	# Call a function named notify_<name represents functionality> to trigger notification event
		# Notification Flag is used
		# In that call self.PropertiesChanged to effect

# Using Gobject.timeout_add() to register a periodically executing function to update the value
	# Notification Flag is used
	# Also Call a function named notify_<name represent functionality>
	# This function must return True in any situation
    #the time unit is milisecond
	
# Override StopNotify() method as well to stop the notification session
class NotifyCharacteristic(Characteristic):
    def __init__(self, bus, index, service):
        Characteristic.__init__(
                self, bus, index,
                COMMAND_NOTIFY_CHARACTERISTIC_UUID,
                ['notify', 'read'],
                service)
        self.value =[0]*4
        self.notifying = False
        GObject.timeout_add(10, self.sendcommand)
    
    def sendcommand(self):
        if(not self.notifying ):
            return True
        for i in range(len(self.value)):
            self.value[i] = self.value[i] +i;
            if(self.value[i] >= 255):
                self.value[i]=0
            #print('notifying now',self.value)
        self.notify_command()
        return True
        
        
    def notify_command(self):
        if (not self.notifying):
            return
        report = []
        for i in range(len(self.value)):
            report.append(dbus.Byte(self.value[i]))
        self.PropertiesChanged(
                GATT_CHRC_IFACE,
                { 'Value': report }, [])
                
                
    def ReadValue(self, options):
        print('report: ',self.value)
        return self.value
		
    def StartNotify(self):
        if self.notifying:
            print('Already notifying, nothing to do')
            return
        print('set to start notifying')
        self.notifying = True
        self.notify_command()

    def StopNotify(self):
        if not self.notifying:
            print('Not notifying, nothing to do')
            return
        self.notifying = False
 
#if you want to have more characteristic in the service just do:
# In its __init__
#   Initialize the Service: Service.__init__(self, bus, index, self.<uuid>, <primary service(true) or not>)
#                                                   self.add_characteristic(<characteristic object name>(bus, <index(numeric order)>, self)) for its characteristics
class CommandService(Service):
    def __init__(self, bus, index):
        Service.__init__(self, bus, index, COMMAND_SERVICE_UUID, True)
        self.add_characteristic(NotifyCharacteristic(bus, 0, self))

 
class Application(dbus.service.Object):
    def __init__(self, bus):
        self.path = '/'
        self.services = []
        dbus.service.Object.__init__(self, bus, self.path)
 
    def get_path(self):
        return dbus.ObjectPath(self.path)
 
    def add_service(self, service):
        self.services.append(service)
 
    @dbus.service.method(DBUS_OM_IFACE, out_signature='a{oa{sa{sv}}}')
    def GetManagedObjects(self):
        response = {}
        for service in self.services:
            response[service.get_path()] = service.get_properties()
            chrcs = service.get_characteristics()
            for chrc in chrcs:
                response[chrc.get_path()] = chrc.get_properties()
        return response


#if you want to have more services in the profile just call self.add_service in the __init__ to register more user-defined service class derived from Service class
class UserApplication(Application):
    def __init__(self, bus):
        Application.__init__(self, bus)
        self.add_service(CommandService(bus, 0))
 
class UserAdvertisement(Advertisement):
    def __init__(self, bus, index):
        Advertisement.__init__(self, bus, index, 'peripheral')
        self.add_service_uuid(COMMAND_SERVICE_UUID)
        self.add_local_name(LOCAL_NAME)
        self.include_tx_power = True
        self.Discoverable = True
   

def find_adapter(bus):
    remote_om = dbus.Interface(bus.get_object(BLUEZ_SERVICE_NAME, '/'), 
                                                    DBUS_OM_IFACE)
    objects = remote_om.GetManagedObjects()

    for o, props in objects.items():
        if LE_ADVERTISING_MANAGER_IFACE in props:
            return o
    return None
 
def main():
    global mainloop
    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
    bus = dbus.SystemBus()
    adapter = find_adapter(bus)
    if not adapter:
        print('BLE adapter not found')
        return
 
    service_manager = dbus.Interface(
                                bus.get_object(BLUEZ_SERVICE_NAME, adapter),
                                GATT_MANAGER_IFACE)
    ad_manager = dbus.Interface(bus.get_object(BLUEZ_SERVICE_NAME, adapter),
                                LE_ADVERTISING_MANAGER_IFACE)
 
    app = UserApplication(bus)
    adv = UserAdvertisement(bus, 0)
 
    mainloop = GObject.MainLoop()
 
    service_manager.RegisterApplication(app.get_path(), {},
                                        reply_handler=register_app_cb,
                                        error_handler=register_app_error_cb)
    ad_manager.RegisterAdvertisement(adv.get_path(), {},
                                     reply_handler=register_ad_cb,
                                     error_handler=register_ad_error_cb)
    try:
        mainloop.run()
    except KeyboardInterrupt:
        adv.Release()
        mainloop.quit()
 
if __name__ == '__main__':
    main()